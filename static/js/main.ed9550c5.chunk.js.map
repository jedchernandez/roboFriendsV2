{"version":3,"sources":["store/Reducer.js","store/Provider.js","components/SearchFilter/NameSearch.js","components/SearchFilter/TagSearch.js","components/RoboFriends/RoboFriend/Avatar.js","components/RoboFriends/RoboFriend/ToggleIncomeButton.js","components/RoboFriends/RoboFriend/Tags/Tags.js","components/RoboFriends/RoboFriend/RoboFriendProfile.js","components/RoboFriends/RoboFriend/RoboFriend.js","components/RoboFriends/RoboFriends.js","App.js","reportWebVitals.js","index.js"],"names":["ROBO_FRIEND_ACTIONS","reducer","state","action","type","onInitialLoad","onSearchName","onSearchTag","onAddTag","onUpdateToggleState","roboFriendsToUpdate","roboFriends","data","roboFriendId","id","tag","index","findIndex","currentRoboFriend","tags","concat","currentToggledRoboFriend","toggleState","map","roboFriend","fullName","firstName","lastName","searchName","searchTag","Context","React","initialState","Provider","props","dispatch","Promise","resolve","Array","from","faker","name","email","internet","company","companyName","position","jobTitle","datatype","uuid","dailyIncome","finance","amount","pic","robohashAvatars","username","userName","background","RandomBackground1","characters","Robots","height","width","then","value","onNameSearch","target","onTagSearch","onTagAdd","key","length","addTag","updateToggleState","children","NameSearch","useContext","className","placeholder","onChange","TagSearch","Avatar","src","alt","ToggleIncomeButton","handleClick","onClick","Tags","onKeyUp","e","RoboFriendProfile","average","income","RoboFriend","rawAverage","Number","reduce","acc","init","Intl","NumberFormat","style","currency","format","formattedIncome","getFilteredRoboFriends","filteredRoboFriendsByName","filterRoboFriendsByName","filterRoboFriendsByTag","filter","toLowerCase","includes","some","RoboFriends","filteredRoboFriends","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ed9550c5.chunk.js","sourcesContent":["export const ROBO_FRIEND_ACTIONS = {\r\n  INITIAL: \"INITIAL\",\r\n  SEARCH_NAME: \"ROBO_FRIEND_SEARCH_NAME\",\r\n  SEARCH_TAG: \"ROBO_FRIEND_SEARCH_TAG\",\r\n  ADD_TAG: \"ROBO_FRIEND_ADD_TAG\",\r\n  UPDATE_TOGGLE_STATE: \"ROBO_FRIEND_UPDATE_TOGGLE_STATE\",\r\n};\r\n\r\nexport const fetchInitial = (data) => ({\r\n  type: ROBO_FRIEND_ACTIONS.INITIAL,\r\n  data,\r\n});\r\n\r\nexport const searchName = (data) => ({\r\n  type: ROBO_FRIEND_ACTIONS.SEARCH_NAME,\r\n  data,\r\n});\r\n\r\nexport const searchTag = (data) => ({\r\n  type: ROBO_FRIEND_ACTIONS.SEARCH_TAG,\r\n  data,\r\n});\r\n\r\nexport const addTag = (data) => {\r\n  if (!data) return;\r\n\r\n  return {\r\n    type: ROBO_FRIEND_ACTIONS.ADD_TAG,\r\n    data,\r\n  };\r\n};\r\n\r\nexport const updateToggleState = (data) => {\r\n  if (!data) return;\r\n\r\n  return {\r\n    type: ROBO_FRIEND_ACTIONS.UPDATE_TOGGLE_STATE,\r\n    data,\r\n  };\r\n};\r\n\r\nexport const reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case ROBO_FRIEND_ACTIONS.INITIAL:\r\n      return onInitialLoad(action);\r\n    case ROBO_FRIEND_ACTIONS.SEARCH_NAME:\r\n      return onSearchName(state, action);\r\n    case ROBO_FRIEND_ACTIONS.SEARCH_TAG:\r\n      return onSearchTag(state, action);\r\n    case ROBO_FRIEND_ACTIONS.ADD_TAG:\r\n      return onAddTag(state, action);\r\n    case ROBO_FRIEND_ACTIONS.UPDATE_TOGGLE_STATE:\r\n      return onUpdateToggleState(state, action);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const onAddTag = (state, action) => {\r\n  const roboFriendsToUpdate = [...state.roboFriends];\r\n  const { id: roboFriendId, tag } = action.data;\r\n  const index = roboFriendsToUpdate.findIndex(({ id }) => roboFriendId === id);\r\n  const currentRoboFriend = roboFriendsToUpdate[index];\r\n  roboFriendsToUpdate[index] = {\r\n    ...currentRoboFriend,\r\n    tags: currentRoboFriend.tags.concat(tag),\r\n  };\r\n\r\n  return {\r\n    ...state,\r\n    roboFriends: roboFriendsToUpdate,\r\n  };\r\n};\r\n\r\nexport const onUpdateToggleState = (state, action) => {\r\n  const roboFriends = [...state.roboFriends];\r\n  const index = roboFriends.findIndex(({ id }) => id === action.data);\r\n  const currentToggledRoboFriend = roboFriends[index];\r\n  roboFriends[index] = {\r\n    ...currentToggledRoboFriend,\r\n    toggleState: !currentToggledRoboFriend.toggleState,\r\n  };\r\n  return {\r\n    ...state,\r\n    roboFriends: roboFriends,\r\n  };\r\n};\r\n\r\nconst onInitialLoad = (action) => {\r\n  return {\r\n    roboFriends: action.data.map((roboFriend) => {\r\n      return {\r\n        ...roboFriend,\r\n        fullName: `${roboFriend.firstName} ${roboFriend.lastName}`,\r\n        tags: [],\r\n        toggleState: false,\r\n      };\r\n    }),\r\n    searchName: \"\",\r\n    searchTag: \"\",\r\n  };\r\n};\r\n\r\nconst onSearchTag = (state, action) => {\r\n  return {\r\n    ...state,\r\n    searchTag: action.data,\r\n  };\r\n};\r\n\r\nconst onSearchName = (state, action) => {\r\n  return {\r\n    ...state,\r\n    searchName: action.data,\r\n  };\r\n};\r\n","import * as React from \"react\";\r\nimport {\r\n  addTag,\r\n  updateToggleState,\r\n  fetchInitial,\r\n  reducer,\r\n  searchName,\r\n  searchTag,\r\n} from \"./Reducer.js\";\r\nimport faker from \"faker\";\r\nimport * as robohashAvatars from \"robohash-avatars\";\r\n\r\nexport const Context = React.createContext();\r\n\r\nconst MAX_TAG_LENGTH = 20;\r\nconst ENTER_KEY = \"Enter\";\r\n\r\nconst initialState = {\r\n  roboFriends: [],\r\n  searchName: \"\",\r\n  searchTag: \"\",\r\n};\r\n\r\nconst fetchData = () => {\r\n  return new Promise((resolve) => {\r\n    debugger;\r\n    resolve(\r\n      Array.from(Array(25)).map(() => ({\r\n        firstName: faker.name.firstName(),\r\n        lastName: faker.name.lastName(),\r\n        email: faker.internet.email(),\r\n        company: faker.company.companyName(),\r\n        position: faker.name.jobTitle(),\r\n        id: faker.datatype.uuid(),\r\n        dailyIncome: [\r\n          faker.finance.amount(),\r\n          faker.finance.amount(),\r\n          faker.finance.amount(),\r\n          faker.finance.amount(),\r\n          faker.finance.amount(),\r\n          faker.finance.amount(),\r\n          faker.finance.amount(),\r\n        ],\r\n        pic: robohashAvatars.generateAvatar({\r\n          username: faker.internet.userName(),\r\n          background: robohashAvatars.BackgroundSets.RandomBackground1,\r\n          characters: robohashAvatars.CharacterSets.Robots,\r\n          height: 400,\r\n          width: 400,\r\n        }),\r\n      }))\r\n    );\r\n  });\r\n};\r\n\r\nconst Provider = (props) => {\r\n  const [state, dispatch] = React.useReducer(reducer, initialState);\r\n\r\n  React.useEffect(() => {\r\n    fetchData().then((roboFriends) => {\r\n      dispatch(fetchInitial(roboFriends));\r\n    });\r\n  }, []);\r\n\r\n  const onNameSearch = ({ target: { value } }) => dispatch(searchName(value));\r\n  const onTagSearch = ({ target: { value } }) => dispatch(searchTag(value));\r\n  const onTagAdd = ({ target, key }, id) => {\r\n    const { value: tag } = target;\r\n\r\n    if (key === ENTER_KEY && tag !== \"\" && tag.length <= MAX_TAG_LENGTH) {\r\n      dispatch(\r\n        addTag({\r\n          id,\r\n          tag,\r\n        })\r\n      );\r\n      target.value = \"\";\r\n    }\r\n  };\r\n  const onUpdateToggleState = (id) => {\r\n    dispatch(updateToggleState(id));\r\n  };\r\n\r\n  return (\r\n    <Context.Provider\r\n      value={{\r\n        state,\r\n        dispatch,\r\n        onNameSearch,\r\n        onTagSearch,\r\n        onTagAdd,\r\n        onUpdateToggleState,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </Context.Provider>\r\n  );\r\n};\r\n\r\nexport default Provider;\r\n","import React from \"react\";\r\nimport { Context } from \"../../store/Provider\";\r\nimport \"./SearchFilter.css\";\r\n\r\nconst NameSearch = () => {\r\n  const { onNameSearch } = React.useContext(Context);\r\n  return (\r\n    <section className=\"fieldbox\">\r\n      <input\r\n        data-testid=\"name-search\"\r\n        className=\"field\"\r\n        type=\"search\"\r\n        placeholder=\"Search by name\"\r\n        onChange={onNameSearch}\r\n      />\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default NameSearch;\r\n","import React from \"react\";\r\nimport { Context } from \"../../store/Provider\";\r\nimport \"./SearchFilter.css\";\r\n\r\nconst TagSearch = () => {\r\n  const { onTagSearch } = React.useContext(Context);\r\n\r\n  return (\r\n    <section className=\"tagfieldbox\">\r\n      <input\r\n        data-testid=\"tag-search\"\r\n        className=\"field\"\r\n        type=\"search\"\r\n        placeholder=\"Search by tag\"\r\n        onChange={onTagSearch}\r\n      />\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default TagSearch;\r\n","import \"./RoboFriend.css\";\r\nexport const Avatar = ({ pic }) => {\r\n  return (\r\n    <section className=\"image-container\">\r\n      <div className=\"circle\">\r\n        <img src={pic} alt=\"robo-friend\" />\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n","import \"./RoboFriend.css\";\r\nimport React from \"react\";\r\nimport { Context } from \"../../../store/Provider\";\r\nexport const ToggleIncomeButton = ({ id, handleClick, toggleState }) => {\r\n  const { onUpdateToggleState } = React.useContext(Context);\r\n  return (\r\n    <section className=\"button-container\">\r\n      <button\r\n        data-testid={`button-${id}`}\r\n        id={id}\r\n        onClick={() => onUpdateToggleState(id)}\r\n        className=\"btn\"\r\n      >\r\n        <i\r\n          id={id}\r\n          className={toggleState ? \"fa fa-minus\" : \"fa fa-plus\"}\r\n          aria-hidden=\"true\"\r\n        ></i>\r\n      </button>\r\n    </section>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Context } from \"../../../../store/Provider\";\r\nimport \"./Tags.css\";\r\n\r\n// displayed tags\r\n// adding a tag\r\n\r\nconst Tags = ({ id: roboFriendId, tags }) => {\r\n  const { onTagAdd } = React.useContext(Context);\r\n\r\n  return (\r\n    <aside className=\"tag-container\">\r\n      <ul className=\"unordered\">\r\n        {tags?.map((tag, index) => (\r\n          <li\r\n            data-testid={`tag-item-${roboFriendId}`}\r\n            key={index}\r\n            className=\"list\"\r\n          >\r\n            <span>{tag}</span>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <input\r\n        data-testid={`add-tag-field-${roboFriendId}`}\r\n        onKeyUp={(e) => onTagAdd(e, roboFriendId)}\r\n        className=\"tagInput\"\r\n        type=\"text\"\r\n        placeholder=\"Add a tag\"\r\n      />\r\n    </aside>\r\n  );\r\n};\r\n\r\nexport default Tags;\r\n","import \"./RoboFriend.css\";\r\nimport Tags from \"./Tags/Tags\";\r\n\r\nexport const RoboFriendProfile = ({\r\n  fullName,\r\n  email,\r\n  company,\r\n  position,\r\n  id,\r\n  average,\r\n  income,\r\n  tags,\r\n  toggleState,\r\n}) => {\r\n  return (\r\n    <section className=\"robo-friend-container\">\r\n      <header className=\"fullname\">{fullName}</header>\r\n      <article className=\"profile\">\r\n        <p>Email: {email}</p>\r\n        <p>Company: {company}</p>\r\n        <p>Position: {position}</p>\r\n        <p data-testid={`average-${id}`}>Average Daily Income: {average}</p>\r\n      </article>\r\n      <aside\r\n        data-testid={`income-list-${id}`}\r\n        className={\r\n          toggleState\r\n            ? \"income-container-expanded\"\r\n            : \"income-container-collapsed\"\r\n        }\r\n      >\r\n        <ul>{income}</ul>\r\n      </aside>\r\n      <Tags id={id} tags={tags} />\r\n    </section>\r\n  );\r\n};\r\n","import * as React from \"react\";\r\nimport \"./RoboFriend.css\";\r\nimport { Avatar } from \"./Avatar\";\r\nimport { ToggleIncomeButton } from \"./ToggleIncomeButton\";\r\nimport { RoboFriendProfile } from \"./RoboFriendProfile\";\r\n\r\nconst RoboFriend = ({\r\n  pic,\r\n  fullName,\r\n  email,\r\n  company,\r\n  position,\r\n  dailyIncome,\r\n  id,\r\n  tags,\r\n  toggleState,\r\n}) => {\r\n  const rawAverage =\r\n    dailyIncome.map(Number).reduce((acc, init) => (acc = acc + init), 0) /\r\n    dailyIncome.length;\r\n\r\n  const average = new Intl.NumberFormat(\"en-US\", {\r\n    style: \"currency\",\r\n    currency: \"USD\",\r\n  }).format(rawAverage);\r\n\r\n  const income = dailyIncome.map((income, index) => {\r\n    const formattedIncome = new Intl.NumberFormat(\"en-US\", {\r\n      style: \"currency\",\r\n      currency: \"USD\",\r\n    }).format(income);\r\n\r\n    return (\r\n      <li data-testid={`income-${id}`} key={index} className=\"income-container\">\r\n        <span className=\"testNumber\">{`Day ${index + 1}:`}</span>\r\n        <span className=\"testValue\">{`${formattedIncome}`}</span>\r\n      </li>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <main data-testid={`roboFriend-${id}`} className=\"card\">\r\n      <Avatar pic={pic} />\r\n      <RoboFriendProfile\r\n        fullName={fullName}\r\n        email={email}\r\n        company={company}\r\n        position={position}\r\n        id={id}\r\n        average={average}\r\n        income={income}\r\n        tags={tags}\r\n        toggleState={toggleState}\r\n      />\r\n      <ToggleIncomeButton id={id} toggleState={toggleState} />\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default RoboFriend;\r\n","import React from \"react\";\r\nimport { Context } from \"../../store/Provider\";\r\nimport RoboFriend from \"./RoboFriend/RoboFriend\";\r\nimport \"./RoboFriends.css\";\r\n\r\nconst RoboFriends = () => {\r\n  const {\r\n    state: { roboFriends, searchName, searchTag },\r\n  } = React.useContext(Context);\r\n\r\n  const filteredRoboFriends = getFilteredRoboFriends({\r\n    searchName,\r\n    searchTag,\r\n    roboFriends,\r\n  });\r\n\r\n  return (\r\n    <section className=\"container\">\r\n      {filteredRoboFriends.map((roboFriend, index) => {\r\n        return (\r\n          <RoboFriend\r\n            key={index}\r\n            pic={roboFriend.pic}\r\n            fullName={roboFriend.fullName}\r\n            email={roboFriend.email}\r\n            company={roboFriend.company}\r\n            position={roboFriend.position}\r\n            dailyIncome={roboFriend.dailyIncome}\r\n            id={roboFriend.id}\r\n            tags={roboFriend.tags}\r\n            toggleState={roboFriend.toggleState}\r\n          />\r\n        );\r\n      })}\r\n    </section>\r\n  );\r\n};\r\n\r\nconst getFilteredRoboFriends = ({ searchName, searchTag, roboFriends }) => {\r\n  const filteredRoboFriendsByName = filterRoboFriendsByName(\r\n    roboFriends,\r\n    searchName\r\n  );\r\n\r\n  const filteredRoboFriendsByTag = filterRoboFriendsByTag(\r\n    filteredRoboFriendsByName,\r\n    searchTag\r\n  );\r\n\r\n  return filteredRoboFriendsByTag;\r\n};\r\n\r\nconst filterRoboFriendsByName = (roboFriends, searchName) => {\r\n  return searchName\r\n    ? roboFriends.filter(({ fullName }) => {\r\n        return fullName.toLowerCase().includes(searchName.toLowerCase());\r\n      })\r\n    : roboFriends;\r\n};\r\n\r\nconst filterRoboFriendsByTag = (filteredRoboFriendsByName, searchTag) => {\r\n  return searchTag\r\n    ? filteredRoboFriendsByName.filter(({ tags }) => {\r\n        return tags\r\n          ? tags.some((tag) =>\r\n              tag.toLowerCase().includes(searchTag.toLowerCase())\r\n            )\r\n          : false;\r\n      })\r\n    : filteredRoboFriendsByName;\r\n};\r\n\r\nexport default RoboFriends;\r\n","import * as React from \"react\";\r\nimport \"./App.css\";\r\nimport NameSearch from \"./components/SearchFilter/NameSearch\";\r\nimport TagSearch from \"./components/SearchFilter/TagSearch\";\r\nimport RoboFriends from \"./components/RoboFriends/RoboFriends\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <main data-testid=\"app\" className=\"App\">\r\n      <NameSearch />\r\n      <TagSearch />\r\n      <RoboFriends />\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport Provider from \"./store/Provider\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}